return(result)
}
pdf <- function(X, i, sigma, mean){
result <- 1./(sqrt(2*pi*sigma[i])*exp((-1)*((X - mean[i])^2)/(2*sigma[i])))
return(result)
}
permutation_matrix <- function(n){
perm_m <- Matrix::Diagonal(n)
perm_m <- perm_m[sample(nrow(perm_m)),]
perm_m <- matrix(perm_m, nrow = n)
return(perm_m)
}
hidden_init <- function(X, h, seed){
set.seed(seed)
current_h <- max(1, min(h, dim(X)[1]))
W <- matrix(sample(-1:1, size = current_h*dim(X)[2], replace = TRUE),
nrow = current_h, byrow = TRUE)
b <- rnorm(current_h)
return(list(W,b,current_h))
}
EEM <- function(X, y, h, C, seed){
flag <- is.null(C)
hid <- hidden_init(X, h, seed)
browser()
Wprim <- unlist(hid[1])
W <- matrix(Wprim, ncol = dim(X)[2], nrow = length(Wprim)/dim(X)[2])
bprim <- unlist(hid[2])
b <- matrix(bprim, ncol = 1, nrow = length(bprim))
H <- sigmoid(X,W,b)
current_h <- unlist(hid[3])
labels <- array(NA,0)
labels <- append(labels,c(min(y),max(y)))
sigma <- c()
mi <- c()
sigma_res <- c()
for(i in 1:2){
data <- matrix()
m <- c()
data <- matrix(H[y==labels[i],], nrow = length(H[y==labels[i],])/dim(H)[2],ncol = dim(H)[2])
for(j in 1:dim(data)[2]){
sum <- 0
for(k in 1:dim(data)[1]){
sum <- sum + data[k,j]
}
m <- append(m, sum/dim(data)[1])
}
sigma <- cov(data)
mi <- append(mi,m)
if(flag == FALSE){
D <- Matrix::Diagonal(current_h)
D <- matrix(D, ncol = current_h, nrow = current_h)
sigma_C <- sigma + (D /(2.0*C))
sigma_res <- append(sigma_res, sigma_C)
}
else{
sigma_res <- append(sigma_res, sigma)
}
}
len <- length(sigma_res)
sigma1 <- matrix(sigma_res[1 : (len/2)], nrow = sqrt((len/2)), ncol = sqrt((len/2)))
sigma2 <- matrix(sigma_res[(len/2)+1 : (len)], nrow = sqrt((len/2)), ncol = sqrt((len/2)))
if(all(is.finite(sigma1)) && all(is.finite(sigma2))){
mi <- matrix(mi, nrow = length(mi)/2)
mi <- t(mi)
m <- mi[2,] - mi[1,]
m <- matrix(m, nrow = 1)
sigma <- sigma1 + sigma2
beta <- MASS::ginv(sigma) %*% t(m)
mi <- t(mi)
m <- c()
c1 <- t(beta)
c2 <- matrix(mi[,1], nrow = 1)
c2 <- t(c2)
c3 <- beta
m <- append(m,c1 %*% c2)
res <- sigma1 %*% c3
sigma1 <- c1 %*% res
c1 <- t(beta)
c2 <- matrix(mi[,2], nrow = 1)
c2 <- t(c2)
c3 <- beta
m <- append(m,c1 %*% c2)
res <- sigma2 %*% c3
sigma2 <- c1 %*% res
sigma <- append(sigma1, sigma2)
result <- EEMObject(sigma,beta,W,b,m)
return(result)
}
else{
print("Sigma is not finite!")
}
}
predict <- function(X, y, eem){
W <- eem$matrix
b <- eem$bias
beta <- eem$beta
pprim <- sigmoid(X, W, b)
labels <- array(NA,0)
labels <- append(labels,c(min(y),max(y)))
p <- pprim %*% beta
pdf1 <- pdf(p, 1, eem$sigma, eem$mean)
pdf2 <- pdf(p, 2, eem$sigma, eem$mean)
pdf_mat <- matrix(rbind(pdf1, pdf2), ncol = 2)
pdf_mat <- t(pdf_mat)
result <- c()
for(i in 1:length(pdf1)){
result <- append(result,which.max(pdf_mat[,i]))
}
return(labels[result])
}
predict_accuracy <- function(predict){
counter <- 0
prd <- predict
for(i in 1:length(prd)){
if(prd[i] == y[i]){
counter <- counter+1
}
}
return(counter/length(prd))
}
predict_proba <- function(X, eem){
browser()
W <- eem$matrix
beta <- eem$beta
b <- eem$bias
pprim <- sigmoid(X, W, b)
p <- pprim %*% beta
pdf1 <- pdf(p, 1, eem$sigma, eem$mean)
pdf2 <- pdf(p, 2, eem$sigma, eem$mean)
pdf <- c(pdf1, pdf2)
result <- array(NA,0)
result <- append(result, pdf)
return(result)
}
predict_proba_accuracy <- function(predict_p){
res_sum <- sum(predict_p)
return(predict_p/res_sum)
}
n <- sample(1:150,1)
m <- sample(1:10,1)
X <- c()
p1 <- n/2
p2 <- n/2
if(n %% 2 == 1){
p1 <- n/2 + 0.5
p2 <- n/2 - 0.5
}
for(i in 1:p1){
x <- c()
for(j in 1:m){
extra <- sample(0:20, 1, replace = FALSE)
x <- append(x, extra)
}
X <- append(X, x)
}
for(i in 1:p2){
x <- c()
for(j in 1:m){
extra1 <- sample(30:50, 1, replace = FALSE)
x <- append(x, extra1)
}
X <- append(X, x)
}
PM <- permutation_matrix(n)
X_R <- matrix(X, nrow = n)
X <- matrix(X, nrow = n, byrow = TRUE)
X <- PM %*% X
y <- dataY(n)
y <- PM %*% y
plot(X[,1], X[,2], col = y)
n <- sample(1:150,1)
m <- sample(1:10,1)
X <- c()
p1 <- n/2
p2 <- n/2
if(n %% 2 == 1){
p1 <- n/2 + 0.5
p2 <- n/2 - 0.5
}
for(i in 1:p1){
x <- c()
for(j in 1:m){
extra <- sample(0:20, 1, replace = FALSE)
x <- append(x, extra)
}
X <- append(X, x)
}
for(i in 1:p2){
x <- c()
for(j in 1:m){
extra1 <- sample(30:50, 1, replace = FALSE)
x <- append(x, extra1)
}
X <- append(X, x)
}
PM <- permutation_matrix(n)
X_R <- matrix(X, nrow = n)
X <- matrix(X, nrow = n, byrow = TRUE)
X <- PM %*% X
y <- dataY(n)
y <- PM %*% y
plot(X[,1], X[,2], col = y)
plot(X[,1], X[,2], color = y)
plot(X[,1], X[,2])
plot(X[1,], X[2,])
plot(X[,1], X[,2])
plot(X[,1])
X[,1]
View(X)
plot(X[,1], X[,2])
dev.off()
plot(X[,1], X[,2])
par(mar=c(1,1,1,1))
plot(X[,1], X[,2])
plot(X[,1], X[,2], col=y)
n <- sample(1:150,1)
m <- sample(1:10,1)
n=100
m= 2
p1 <- n/2
p2 <- n/2
X <- c()
for(i in 1:p1){
x <- c()
for(j in 1:m){
extra <- sample(0:20, 1, replace = FALSE)
x <- append(x, extra)
}
X <- append(X, x)
}
for(i in 1:p2){
x <- c()
for(j in 1:m){
extra1 <- sample(30:50, 1, replace = FALSE)
x <- append(x, extra1)
}
X <- append(X, x)
}
X <- matrix(X, nrow = n, byrow = TRUE)
y <- dataY(n)
plot(X)
plot(X, col=y)
X <- c()
y <- c()
for(i in 1:p1){
x <- c()
for(j in 1:m){
extra <- sample(0:20, 1, replace = FALSE)
x <- append(x, extra)
}
X <- append(X, x)
y <- append(y,1)
}
for(i in 1:p2){
x <- c()
for(j in 1:m){
extra1 <- sample(30:50, 1, replace = FALSE)
x <- append(x, extra1)
}
X <- append(X, x)
y <- append(y,2)
}
X <- matrix(X, nrow = n, byrow = TRUE)
#X <- PM %*% X
y <- matrix(y, nrow = n)
plot(X, col=y)
X <- PM %*% X
PM <- permutation_matrix(n)
X <- PM %*% X
y <- PM %*% y
plot(X, col=y)
h <- sample(1:10, 1)
C <- 10000
seed <- NULL
eem <- EEM(X, y, h, C, seed)
write(X_R, file = "R/examples/python_dt/matrix_X", ncolumns = dim(X)[2])
write(eem$bias, file = "R/examples/python_dt/bias", ncolumns = 1)
write(PM, file = "R/examples/python_dt/PM", ncolumns = dim(PM)[2])
W <- matrix(eem$matrix, nrow = dim(eem$matrix)[1])
write(W, file = "R/examples/python_dt/matrix_W", ncolumns = dim(eem$matrix)[2])
write(y, file = "R/examples/python_dt/matrix_Y", ncolumns = 1)
p1 <- predict(X, y, eem)
p2 <- predict_proba(X, eem)
p3 <- predict_accuracy(p1)
p1
write(PM, file = "R/examples/python_dt/PM", ncolumns = dim(PM)[2])
for(i in 1:p1){
x <- c()
for(j in 1:m){
extra <- sample(0:20, 1, replace = FALSE)
x <- append(x, extra)
}
X <- append(X, x)
y <- append(y,1)
}
for(i in 1:p2){
x <- c()
for(j in 1:m){
extra1 <- sample(30:50, 1, replace = FALSE)
x <- append(x, extra1)
}
X <- append(X, x)
y <- append(y,2)
}
for(i in 1:p1){
x <- c()
for(j in 1:m){
extra <- sample(0:20, 1, replace = FALSE)
x <- append(x, extra)
}
X <- append(X, x)
y <- append(y,1)
}
for(i in 1:p2){
x <- c()
for(j in 1:m){
extra1 <- sample(30:50, 1, replace = FALSE)
x <- append(x, extra1)
}
X <- append(X, x)
y <- append(y,2)
}
X <- c()
y <- c()
p1 <- n/2
p2 <- n/2
for(i in 1:p1){
x <- c()
for(j in 1:m){
extra <- sample(0:20, 1, replace = FALSE)
x <- append(x, extra)
}
X <- append(X, x)
y <- append(y,1)
}
for(i in 1:p2){
x <- c()
for(j in 1:m){
extra1 <- sample(30:50, 1, replace = FALSE)
x <- append(x, extra1)
}
X <- append(X, x)
y <- append(y,2)
}
PM <- permutation_matrix(n)
X_R <- matrix(X, nrow = n)
X <- matrix(X, nrow = n, byrow = TRUE)
X <- PM %*% X
y <- matrix(y, nrow = n)
y <- PM %*% y
C <- 10000
seed <- NULL
eem <- EEM(X, y, h, C, seed)
write(X_R, file = "R/examples/python_dt/matrix_X", ncolumns = dim(X)[2])
write(eem$bias, file = "R/examples/python_dt/bias", ncolumns = 1)
write(PM, file = "R/examples/python_dt/PM", ncolumns = dim(PM)[2])
W <- matrix(eem$matrix, nrow = dim(eem$matrix)[1])
write(W, file = "R/examples/python_dt/matrix_W", ncolumns = dim(eem$matrix)[2])
write(y, file = "R/examples/python_dt/matrix_Y", ncolumns = 1)
p1 <- predict(X, y, eem)
p2 <- predict_proba(X, eem)
p3 <- predict_accuracy(p1)
plot(X, col=y)
#Gauss dataset
n <- 100#sample(1:150,1)
m <- 2#sample(1:10,1)
X <- c()
y <- c()
p1 <- n/2
p2 <- n/2
if(n %% 2 == 1){
p1 <- n/2 + 0.5
p2 <- n/2 - 0.5
}
for(i in 1:p1){
x <- c()
for(j in 1:m){
extra <- sample(0:20, 1, replace = FALSE)
x <- append(x, extra)
}
X <- append(X, x)
y <- append(y,1)
}
for(i in 1:p2){
x <- c()
for(j in 1:m){
extra1 <- sample(30:50, 1, replace = FALSE)
x <- append(x, extra1)
}
X <- append(X, x)
y <- append(y,2)
}
PM <- permutation_matrix(n)
X_R <- matrix(X, nrow = n)
X <- matrix(X, nrow = n, byrow = TRUE)
X <- PM %*% X
y <- matrix(y, nrow = n)
y <- PM %*% y
h <- sample(1:10, 1)
C <- NULL
C <- 10000
#seed <- NULL
seed <- 777
eem <- EEM(X, y, h, C, seed)
write.csv(X, file = "R/examples/python_dt/matrix_X", ncolumns = dim(X)[2])
write.csv(eem$bias, file = "R/examples/python_dt/bias", ncolumns = 1)
write.csv(PM, file = "R/examples/python_dt/PM", ncolumns = dim(PM)[2])
#W <- matrix(eem$matrix, nrow = dim(eem$matrix)[1])
write.csv(W, file = "R/examples/python_dt/matrix_W", ncolumns = dim(eem$matrix)[2])
write.csv(y, file = "R/examples/python_dt/matrix_Y", ncolumns = 1)
p1 <- predict(X, y, eem)
p2 <- predict_proba(X, eem)
p3 <- predict_accuracy(p1)
p4 <- predict_proba_accuracy(p2)
resultFile <- "result.txt"
cat("Predict_accuracy result: ", file = resultFile, append = FALSE)
cat(p3, file = resultFile, append = TRUE, sep = "\n")
write.csv(X, file = "R/examples/python_dt/matrix_X", ncolumns = dim(X)[2])
write.csv(X, file = "R/examples/python_dt/matrix_X")
#Gauss dataset
n <- 100#sample(1:150,1)
m <- 2#sample(1:10,1)
X <- c()
y <- c()
p1 <- n/2
p2 <- n/2
if(n %% 2 == 1){
p1 <- n/2 + 0.5
p2 <- n/2 - 0.5
}
for(i in 1:p1){
x <- c()
for(j in 1:m){
extra <- sample(0:20, 1, replace = FALSE)
x <- append(x, extra)
}
X <- append(X, x)
y <- append(y,1)
}
for(i in 1:p2){
x <- c()
for(j in 1:m){
extra1 <- sample(30:50, 1, replace = FALSE)
x <- append(x, extra1)
}
X <- append(X, x)
y <- append(y,2)
}
PM <- permutation_matrix(n)
X_R <- matrix(X, nrow = n)
X <- matrix(X, nrow = n, byrow = TRUE)
X <- PM %*% X
y <- matrix(y, nrow = n)
y <- PM %*% y
h <- sample(1:10, 1)
C <- NULL
C <- 10000
#seed <- NULL
seed <- 777
eem <- EEM(X, y, h, C, seed)
write.csv(X, file = "R/examples/python_dt/matrix_X.csv")
write.csv(eem$bias, file = "R/examples/python_dt/bias.csv", ncolumns = 1)
write.csv(PM, file = "R/examples/python_dt/PM.csv", ncolumns = dim(PM)[2])
#W <- matrix(eem$matrix, nrow = dim(eem$matrix)[1])
write.csv(W, file = "R/examples/python_dt/matrix_W.csv", ncolumns = dim(eem$matrix)[2])
write.csv(y, file = "R/examples/python_dt/matrix_Y.csv", ncolumns = 1)
p1 <- predict(X, y, eem)
p2 <- predict_proba(X, eem)
p3 <- predict_accuracy(p1)
p4 <- predict_proba_accuracy(p2)
resultFile <- "result.txt"
cat("Predict_accuracy result: ", file = resultFile, append = FALSE)
cat(p3, file = resultFile, append = TRUE, sep = "\n")
help(write.csv)
X
write.csv(X, file = "R/examples/python_dt/matrix_X.csv", row.names=FALSE, quote=FALSE)
write.csv(X, file = "R/examples/python_dt/matrix_X.csv", row.names=FALSE, quote=FALSE)
write.csv(eem$bias, file = "R/examples/python_dt/bias.csv",  row.names=FALSE, quote=FALSE)
write.csv(PM, file = "R/examples/python_dt/PM.csv", row.names=FALSE, quote=FALSE)
#W <- matrix(eem$matrix, nrow = dim(eem$matrix)[1])
write.csv(W, file = "R/examples/python_dt/matrix_W.csv", row.names=FALSE, quote=FALSE)
write.csv(y, file = "R/examples/python_dt/matrix_Y.csv", row.names=FALSE, quote=FALSE)
write.csv(X, file = "R/examples/python_dt/matrix_X.csv", row.names=FALSE, quote=FALSE, col.names=FALSE)
write.csv(eem$bias, file = "R/examples/python_dt/bias.csv",  row.names=FALSE, quote=FALSE, col.names=FALSE)
write.csv(PM, file = "R/examples/python_dt/PM.csv", row.names=FALSE, quote=FALSE, col.names=FALSE)
#W <- matrix(eem$matrix, nrow = dim(eem$matrix)[1])
write.csv(W, file = "R/examples/python_dt/matrix_W.csv", row.names=FALSE, quote=FALSE, col.names=FALSE)
write.csv(y, file = "R/examples/python_dt/matrix_Y.csv", row.names=FALSE, quote=FALSE, col.names=FALSE)
p1 <- predict(X, y, eem)
p2 <- predict_proba(X, eem)
p3 <- predict_accuracy(p1)
p3
h = 20
eem <- EEM(X, y, h, C, seed)
p1 <- predict(X, y, eem)
p2 <- predict_proba(X, eem)
p3 <- predict_accuracy(p1)
p3
eem <- EEM(X, y, h, C, seed)
p1 <- predict(X, y, eem)
p2 <- predict_proba(X, eem)
p3 <- predict_accuracy(p1)
p3
c <- c(1,2,3,4,5,6,7,8,9)
X <- matrix(c, nrow = 3, byrow = TRUE)
X
X[] <- sample(X)
X
X <- matrix(c, nrow =3, byrow = TRUE)
X
X <- X[sample(nrow(X)), sample(ncol(X))]
X
